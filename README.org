* aleph-stress
First experiment with =aleph= in the context of a toy architecture for:

- the offloading of work =submissions= from a load-balanced array of =api= servers to a =heavylifter= server (it just "sleeps" and doesn't actually do any heavy lifting);
- monitoring asynchronous completions of that work notified via =webhooks=; and
- notification of interested clients via their =websocket= connections (intermediated by a =postgres= table mapping =id=s to =completion= timestamps)

[[file:images/aleph-stress.png]]

*Disclaimer:* this architecture is not intended to be optimal or even good, just simple. I'm interested to see where it hits the wall in terms of resource utilisation given the asynchronous architecture of =aleph=

** Development
In a local development environment =heavylifter= and =api-lb= must resolve to localhost to add the following to =etc/hosts=

#+begin_example
127.0.0.1 heavylifter
127.0.0.1 api-lb
#+end_example

If you're running Emacs, =.dir-locals.el= settings mean you should be able to jack-in to =cider= and =(go)=

If establishing and connecting to the REPL through other means, you'll want the =:dev:test:backend= aliases tin order to obtain the correct classpath.

When the system is =:initiated= in the REPL, proceed to run the sanity check steps documented below.

** Quick sanity check
Reset the DB with =just db-reset=

Visit =ws.html= in your browser and open the DevTools console.

If the backend is up-and-running you should see:

#+begin_example
Connection opened
#+end_example

One of the =api= servers in the composition will be =Polling submission status for [#]...= in the REPL.

Submit some work:

#+begin_src restclient
POST http://localhost:9000/submission/50
#+end_src

#+RESULTS:
#+BEGIN_SRC js
// POST http://localhost:9000/submission/50
// HTTP/1.1 200 OK
// Content-Type: application/octet-stream
// Server: Aleph/0.5.0
// Date: Wed, 01 Nov 2023 10:49:45 GMT
// Connection: Keep-Alive
// content-length: 0
// Request duration: 0.078365s
#+END_SRC

** Driving
*** Build
#+begin_src sh
just build
#+end_src

*** Prepare DB
#+begin_src sh
docker-compose up postgres
#+end_src

and

#+begin_src sh
just db-create db-migrate
#+end_src

*** Bring up rig
#+begin_src sh
docker-compose up
#+end_src

*** Drive
More details and results of stress testing with an async =driver= process coming soon...

*** Metrics

Various JVM and =ring= metrics for the =api= servers are scrapped by =prometheus= via a middleware-provided =/metrics= route

The data captures can be visualised as required using =graphana= at the http://localhost:3000

*NB:* The specific steps for connecting the two and building an appropriate dashboard are out of the scope of this document üôåüèª look at the =docker-compose.yml= for some hints

With the development system up and running you can inspect the raw metric data that is being collected using:

#+begin_src restclient
GET http://localhost:9000/metrics
#+end_src

#+RESULTS:
#+BEGIN_SRC text
# HELP jvm_buffer_pool_used_bytes Used bytes of a given JVM buffer pool.
# TYPE jvm_buffer_pool_used_bytes gauge
jvm_buffer_pool_used_bytes{pool="mapped",} 0.0
jvm_buffer_pool_used_bytes{pool="direct",} 1.7066862E7
jvm_buffer_pool_used_bytes{pool="mapped - 'non-volatile memory'",} 0.0
# HELP jvm_buffer_pool_capacity_bytes Bytes capacity of a given JVM buffer pool.
# TYPE jvm_buffer_pool_capacity_bytes gauge
jvm_buffer_pool_capacity_bytes{pool="mapped",} 0.0
jvm_buffer_pool_capacity_bytes{pool="direct",} 1.7066861E7
jvm_buffer_pool_capacity_bytes{pool="mapped - 'non-volatile memory'",} 0.0
# HELP jvm_buffer_pool_used_buffers Used buffers of a given JVM buffer pool.
# TYPE jvm_buffer_pool_used_buffers gauge
jvm_buffer_pool_used_buffers{pool="mapped",} 0.0
jvm_buffer_pool_used_buffers{pool="direct",} 12.0
jvm_buffer_pool_used_buffers{pool="mapped - 'non-volatile memory'",} 0.0
# HELP jvm_gc_collection_seconds Time spent in a given JVM garbage collector in seconds.
# TYPE jvm_gc_collection_seconds summary
jvm_gc_collection_seconds_count{gc="G1 Young Generation",} 34.0
jvm_gc_collection_seconds_sum{gc="G1 Young Generation",} 0.125
jvm_gc_collection_seconds_count{gc="G1 Old Generation",} 0.0
jvm_gc_collection_seconds_sum{gc="G1 Old Generation",} 0.0
# HELP process_cpu_seconds_total Total user and system CPU time spent in seconds.
# TYPE process_cpu_seconds_total counter
process_cpu_seconds_total 37.73
# HELP process_start_time_seconds Start time of the process since unix epoch in seconds.
# TYPE process_start_time_seconds gauge
process_start_time_seconds 1.698839392031E9
# HELP process_open_fds Number of open file descriptors.
# TYPE process_open_fds gauge
process_open_fds 236.0
# HELP process_max_fds Maximum number of open file descriptors.
# TYPE process_max_fds gauge
process_max_fds 1048576.0
# HELP process_virtual_memory_bytes Virtual memory size in bytes.
# TYPE process_virtual_memory_bytes gauge
process_virtual_memory_bytes 1.4771605504E10
# HELP process_resident_memory_bytes Resident memory size in bytes.
# TYPE process_resident_memory_bytes gauge
process_resident_memory_bytes 7.95385856E8
# HELP http_exceptions_total the total number of exceptions encountered during HTTP processing.
# TYPE http_exceptions_total counter
# HELP jvm_memory_bytes_used Used bytes of a given JVM memory area.
# TYPE jvm_memory_bytes_used gauge
jvm_memory_bytes_used{area="heap",} 1.27947744E8
jvm_memory_bytes_used{area="nonheap",} 1.42496768E8
# HELP jvm_memory_bytes_committed Committed (bytes) of a given JVM memory area.
# TYPE jvm_memory_bytes_committed gauge
jvm_memory_bytes_committed{area="heap",} 3.90070272E8
jvm_memory_bytes_committed{area="nonheap",} 1.78388992E8
# HELP jvm_memory_bytes_max Max (bytes) of a given JVM memory area.
# TYPE jvm_memory_bytes_max gauge
jvm_memory_bytes_max{area="heap",} 8.250195968E9
jvm_memory_bytes_max{area="nonheap",} -1.0
# HELP jvm_memory_bytes_init Initial bytes of a given JVM memory area.
# TYPE jvm_memory_bytes_init gauge
jvm_memory_bytes_init{area="heap",} 5.15899392E8
jvm_memory_bytes_init{area="nonheap",} 7667712.0
# HELP jvm_memory_pool_bytes_used Used bytes of a given JVM memory pool.
# TYPE jvm_memory_pool_bytes_used gauge
jvm_memory_pool_bytes_used{pool="CodeHeap 'non-nmethods'",} 1906048.0
jvm_memory_pool_bytes_used{pool="Metaspace",} 9.3933112E7
jvm_memory_pool_bytes_used{pool="CodeHeap 'profiled nmethods'",} 1.4670976E7
jvm_memory_pool_bytes_used{pool="Compressed Class Space",} 2.3919432E7
jvm_memory_pool_bytes_used{pool="G1 Eden Space",} 2.5165824E7
jvm_memory_pool_bytes_used{pool="G1 Old Gen",} 1.01257728E8
jvm_memory_pool_bytes_used{pool="G1 Survivor Space",} 1524192.0
jvm_memory_pool_bytes_used{pool="CodeHeap 'non-profiled nmethods'",} 8067200.0
# HELP jvm_memory_pool_bytes_committed Committed bytes of a given JVM memory pool.
# TYPE jvm_memory_pool_bytes_committed gauge
jvm_memory_pool_bytes_committed{pool="CodeHeap 'non-nmethods'",} 3145728.0
jvm_memory_pool_bytes_committed{pool="Metaspace",} 1.18489088E8
jvm_memory_pool_bytes_committed{pool="CodeHeap 'profiled nmethods'",} 1.6121856E7
jvm_memory_pool_bytes_committed{pool="Compressed Class Space",} 3.2178176E7
jvm_memory_pool_bytes_committed{pool="G1 Eden Space",} 2.26492416E8
jvm_memory_pool_bytes_committed{pool="G1 Old Gen",} 1.59383552E8
jvm_memory_pool_bytes_committed{pool="G1 Survivor Space",} 4194304.0
jvm_memory_pool_bytes_committed{pool="CodeHeap 'non-profiled nmethods'",} 8454144.0
# HELP jvm_memory_pool_bytes_max Max bytes of a given JVM memory pool.
# TYPE jvm_memory_pool_bytes_max gauge
jvm_memory_pool_bytes_max{pool="CodeHeap 'non-nmethods'",} 7606272.0
jvm_memory_pool_bytes_max{pool="Metaspace",} -1.0
jvm_memory_pool_bytes_max{pool="CodeHeap 'profiled nmethods'",} 1.22023936E8
jvm_memory_pool_bytes_max{pool="Compressed Class Space",} 1.073741824E9
jvm_memory_pool_bytes_max{pool="G1 Eden Space",} -1.0
jvm_memory_pool_bytes_max{pool="G1 Old Gen",} 8.250195968E9
jvm_memory_pool_bytes_max{pool="G1 Survivor Space",} -1.0
jvm_memory_pool_bytes_max{pool="CodeHeap 'non-profiled nmethods'",} 1.22028032E8
# HELP jvm_memory_pool_bytes_init Initial bytes of a given JVM memory pool.
# TYPE jvm_memory_pool_bytes_init gauge
jvm_memory_pool_bytes_init{pool="CodeHeap 'non-nmethods'",} 2555904.0
jvm_memory_pool_bytes_init{pool="Metaspace",} 0.0
jvm_memory_pool_bytes_init{pool="CodeHeap 'profiled nmethods'",} 2555904.0
jvm_memory_pool_bytes_init{pool="Compressed Class Space",} 0.0
jvm_memory_pool_bytes_init{pool="G1 Eden Space",} 2.9360128E7
jvm_memory_pool_bytes_init{pool="G1 Old Gen",} 4.86539264E8
jvm_memory_pool_bytes_init{pool="G1 Survivor Space",} 0.0
jvm_memory_pool_bytes_init{pool="CodeHeap 'non-profiled nmethods'",} 2555904.0
# HELP http_request_latency_seconds the response latency for HTTP requests.
# TYPE http_request_latency_seconds histogram
# HELP jvm_threads_current Current thread count of a JVM
# TYPE jvm_threads_current gauge
jvm_threads_current 26.0
# HELP jvm_threads_daemon Daemon thread count of a JVM
# TYPE jvm_threads_daemon gauge
jvm_threads_daemon 17.0
# HELP jvm_threads_peak Peak thread count of a JVM
# TYPE jvm_threads_peak gauge
jvm_threads_peak 26.0
# HELP jvm_threads_started_total Started thread count of a JVM
# TYPE jvm_threads_started_total counter
jvm_threads_started_total 38.0
# HELP jvm_threads_deadlocked Cycles of JVM-threads that are in deadlock waiting to acquire object monitors or ownable synchronizers
# TYPE jvm_threads_deadlocked gauge
jvm_threads_deadlocked 0.0
# HELP jvm_threads_deadlocked_monitor Cycles of JVM-threads that are in deadlock waiting to acquire object monitors
# TYPE jvm_threads_deadlocked_monitor gauge
jvm_threads_deadlocked_monitor 0.0
# HELP jvm_threads_state Current count of threads by state
# TYPE jvm_threads_state gauge
jvm_threads_state{state="TERMINATED",} 0.0
jvm_threads_state{state="WAITING",} 6.0
jvm_threads_state{state="RUNNABLE",} 8.0
jvm_threads_state{state="TIMED_WAITING",} 12.0
jvm_threads_state{state="NEW",} 0.0
jvm_threads_state{state="BLOCKED",} 0.0
# HELP http_requests_total the total number of HTTP requests processed.
# TYPE http_requests_total counter

GET http://localhost:9000/metrics
HTTP/1.1 200 OK
Content-Type: text/plain; version=0.0.4; charset=utf-8
Server: Aleph/0.5.0
Date: Wed, 01 Nov 2023 11:50:10 GMT
Connection: Keep-Alive
content-length: 7144
Request duration: 0.082576s
#+END_SRC

*** Insights

Coming soon...
